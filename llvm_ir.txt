declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)

@N = dso_local constant i32 16
@c = dso_local global i32 0
@k = dso_local constant i32 0
@l = dso_local constant i32 1
@n = dso_local constant i32 2
@q = dso_local constant i32 2
@qq = dso_local constant i32 3
@p = dso_local global i32 0
@pp = dso_local global i32 1
@ppp = dso_local global i32 2
@a1 = dso_local constant [3 x i32] [i32 0, i32 1, i32 2]
@a2 = dso_local constant [3 x [3 x i32]] [[3 x i32] [i32 3, i32 2, i32 3], [3 x i32] [i32 1, i32 7, i32 7], [3 x i32] [i32 0, i32 0, i32 0]]

define dso_local i32 @plus1(i32) {
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	%4 = load i32, i32* %2
	store i32 %4, i32* %3
	%5 = load i32, i32* %3
	%6 = add i32 %5, 1
	ret i32 %6
}
define dso_local void @err() {
	call void @putch(i32 10)
	call void @putch(i32 101)
	call void @putch(i32 114)
	call void @putch(i32 114)
	call void @putch(i32 10)
	ret void
}
define dso_local i32 @first([3 x i32]*) {
	%2 = getelementptr [3 x i32], [3 x i32]* %0, i32 0, i32 0
	%3 = getelementptr i32, i32* %2, i32 2
	%4 = load i32, i32* %3
	ret i32 %4
}
define dso_local void @merge(i32* ,i32 ,i32 ,i32) {
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = alloca i32
	store i32 %3, i32* %7
	%8 = load i32, i32* @N
	%9 = alloca [16 x i32]
	%10 = alloca i32
	%11 = load i32, i32* %5
	store i32 %11, i32* %10
	%12 = load i32, i32* %10
	%13 = load i32, i32* %7
	%14 = icmp sle i32 %12, %13
	%15 = load i32, i32* %10
	%16 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %15
	%17 = load i32, i32* %10
	%18 = getelementptr i32, i32* %0, i32 %17
	%19 = load i32, i32* %18
	store i32 %19, i32* %16
	%20 = load i32, i32* %10
	%21 = add i32 %20, 1
	store i32 %21, i32* %10
	%22 = load i32, i32* %5
	store i32 %22, i32* %10
	%23 = alloca i32
	%24 = load i32, i32* %6
	%25 = add i32 %24, 1
	store i32 %25, i32* %23
	%26 = alloca i32
	store i32 0, i32* %26
	%27 = load i32, i32* %10
	%28 = load i32, i32* %6
	%29 = icmp sle i32 %27, %28
	br i1 %29 label %30, label <else0>
	
; <label>:30:
	%31 = load i32, i32* %23
	%32 = load i32, i32* %7
	%33 = icmp sle i32 %31, %32
	%34 = load i32, i32* %10
	%35 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %34
	%36 = load i32, i32* %35
	%37 = load i32, i32* %23
	%38 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %37
	%39 = load i32, i32* %38
	%40 = icmp sle i32 %36, %39
	br i1 %40, label %41, label %53

; <label>:41:
	%42 = load i32, i32* %5
	%43 = load i32, i32* %26
	%44 = add i32 %42, %43
	%45 = getelementptr i32, i32* %0, i32 %44
	%46 = load i32, i32* %10
	%47 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %46
	%48 = load i32, i32* %47
	store i32 %48, i32* %45
	%49 = load i32, i32* %10
	%50 = add i32 %49, 1
	store i32 %50, i32* %10
	%51 = load i32, i32* %26
	%52 = add i32 %51, 1
	store i32 %52, i32* %26
	br label %65

; <label>:53:
	%54 = load i32, i32* %5
	%55 = load i32, i32* %26
	%56 = add i32 %54, %55
	%57 = getelementptr i32, i32* %0, i32 %56
	%58 = load i32, i32* %23
	%59 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %58
	%60 = load i32, i32* %59
	store i32 %60, i32* %57
	%61 = load i32, i32* %23
	%62 = add i32 %61, 1
	store i32 %62, i32* %23
	%63 = load i32, i32* %26
	%64 = add i32 %63, 1
	store i32 %64, i32* %26
	br label %65

; <label>:65:
	%66 = load i32, i32* %10
	%67 = load i32, i32* %6
	%68 = icmp sle i32 %66, %67
	br i1 %68, label %69, label %84

; <label>:69:
	%70 = load i32, i32* %10
	%71 = load i32, i32* %6
	%72 = icmp sle i32 %70, %71
	%73 = load i32, i32* %5
	%74 = load i32, i32* %26
	%75 = add i32 %73, %74
	%76 = getelementptr i32, i32* %0, i32 %75
	%77 = load i32, i32* %10
	%78 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %77
	%79 = load i32, i32* %78
	store i32 %79, i32* %76
	%80 = load i32, i32* %10
	%81 = add i32 %80, 1
	store i32 %81, i32* %10
	%82 = load i32, i32* %26
	%83 = add i32 %82, 1
	store i32 %83, i32* %26
	br label %99

; <label>:84:
	%85 = load i32, i32* %23
	%86 = load i32, i32* %7
	%87 = icmp sle i32 %85, %86
	%88 = load i32, i32* %5
	%89 = load i32, i32* %26
	%90 = add i32 %88, %89
	%91 = getelementptr i32, i32* %0, i32 %90
	%92 = load i32, i32* %23
	%93 = getelementptr [16 x i32], [16 x i32]* %9, i32 0, i32 %92
	%94 = load i32, i32* %93
	store i32 %94, i32* %91
	%95 = load i32, i32* %23
	%96 = add i32 %95, 1
	store i32 %96, i32* %23
	%97 = load i32, i32* %26
	%98 = add i32 %97, 1
	store i32 %98, i32* %26
	br label %99

; <label>:99:
	ret void
}
define dso_local void @merge_sort(i32* ,i32 ,i32) {
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	store i32 %2, i32* %5
	%6 = load i32, i32* %4
	%7 = load i32, i32* %5
	%8 = icmp sge i32 %6, %7
	br i1 %8, label %9, label %10

; <label>:9:
	ret void
	br label %10

; <label>:10:
	%11 = alloca i32
	%12 = load i32, i32* %4
	%13 = load i32, i32* %5
	%14 = add i32 %12, %13
	%15 = sdiv i32 %14, 2
	store i32 %15, i32* %11
	%16 = load i32, i32* %4
	%17 = load i32, i32* %11
	call void @merge_sort(i32* %0, i32 %16, i32 %17)
	%18 = load i32, i32* %11
	%19 = add i32 %18, 1
	%20 = load i32, i32* %5
	call void @merge_sort(i32* %0, i32 %19, i32 %20)
	%21 = load i32, i32* %4
	%22 = load i32, i32* %11
	%23 = load i32, i32* %5
	call void @merge(i32* %0, i32 %21, i32 %22, i32 %23)
	ret void
}
define dso_local i32 @sum(i32* ,i32) {
	%3 = alloca i32
	store i32 %1, i32* %3
	%4 = alloca i32
	store i32 0, i32* %4
	%5 = alloca i32
	store i32 0, i32* %5
	%6 = load i32, i32* %4
	%7 = load i32, i32* %3
	%8 = icmp slt i32 %6, %7
	%9 = load i32, i32* %5
	%10 = load i32, i32* %4
	%11 = getelementptr i32, i32* %0, i32 0
	%12 = load i32, i32* %11
	%13 = add i32 %9, %12
	store i32 %13, i32* %5
	%14 = load i32, i32* %4
	%15 = add i32 %14, 1
	store i32 %15, i32* %4
	%16 = load i32, i32* %5
	ret i32 %16
}
define dso_local i32 @plus(i32 ,i32) {
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}
define dso_local void @out(i32) {
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putch(i32 10)
	call void @putch(i32 97)
	call void @putch(i32 110)
	call void @putch(i32 115)
	call void @putch(i32 119)
	call void @putch(i32 101)
	call void @putch(i32 114)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 32)
	call void @putint(i32 %3)
	ret void
}

define dso_local i32 @main() {
	%1 = alloca i32
	store i32 1, i32* %1
	%2 = alloca [16 x i32]
	%3 = getelementptr [16 x i32], [16 x i32]* %2, i32 0, i32 0
	store i32 1, i32* %3
	%4 = getelementptr i32, i32* %3, i32 1
	store i32 2, i32* %4
	%5 = getelementptr i32, i32* %3, i32 2
	store i32 13, i32* %5
	%6 = getelementptr i32, i32* %3, i32 3
	store i32 4, i32* %6
	%7 = getelementptr i32, i32* %3, i32 4
	store i32 5, i32* %7
	%8 = getelementptr i32, i32* %3, i32 5
	store i32 10, i32* %8
	%9 = getelementptr i32, i32* %3, i32 6
	store i32 12, i32* %9
	%10 = getelementptr i32, i32* %3, i32 7
	store i32 9, i32* %10
	%11 = getelementptr i32, i32* %3, i32 8
	store i32 26, i32* %11
	%12 = getelementptr i32, i32* %3, i32 9
	store i32 44, i32* %12
	%13 = getelementptr i32, i32* %3, i32 10
	store i32 0, i32* %13
	%14 = getelementptr i32, i32* %3, i32 11
	store i32 303, i32* %14
	%15 = getelementptr i32, i32* %3, i32 12
	store i32 1000, i32* %15
	%16 = getelementptr i32, i32* %3, i32 13
	store i32 32, i32* %16
	%17 = getelementptr i32, i32* %3, i32 14
	store i32 54, i32* %17
	%18 = getelementptr i32, i32* %3, i32 15
	store i32 123, i32* %18
	%19 = alloca i32
	%20 = alloca i32
	%21 = call i32 @getint()
	store i32 %21, i32* %19
	store i32 0, i32* %1
	call void @putch(i32 50)
	call void @putch(i32 48)
	call void @putch(i32 51)
	call void @putch(i32 55)
	call void @putch(i32 51)
	call void @putch(i32 51)
	call void @putch(i32 55)
	call void @putch(i32 52)
	%22 = load i32, i32* %1
	%23 = load i32, i32* %19
	%24 = icmp sle i32 %22, %23
	%25 = load i32, i32* %1
	%26 = srem i32 %25, 4
	%27 = icmp eq i32 %26, 0
	br i1 %27, label %28, label %29

; <label>:28:
	call void @putch(i32 10)
	call void @putch(i32 84)
	call void @putch(i32 114)
	call void @putch(i32 117)
	call void @putch(i32 101)
	br label %29

; <label>:29:
	%30 = load i32, i32* %1
	%31 = srem i32 %30, 3
	%32 = icmp eq i32 %31, 0
	br i1 %32, label %33, label %34

; <label>:33:
	br label %34

; <label>:34:
	call void @putch(i32 10)
	call void @putch(i32 102)
	call void @putch(i32 97)
	call void @putch(i32 108)
	call void @putch(i32 115)
	call void @putch(i32 101)
	store i32 0, i32* %1
	%35 = load i32, i32* %1
	%36 = load i32, i32* @N
	%37 = icmp slt i32 %35, %36
	%38 = load i32, i32* %1
	%39 = getelementptr [16 x i32], [16 x i32]* %2, i32 0, i32 1
	%40 = load i32, i32* %39
	call void @putint(i32 %40)
	call void @putch(i32 32)
	%41 = load i32, i32* %1
	%42 = add i32 %41, 1
	store i32 %42, i32* %1
	%43 = getelementptr [16 x i32], [16 x i32]* %2, i32 0, i32 0
	%44 = load i32, i32* @N
	%45 = sub i32 %44, 1
	call void @merge_sort(i32* %43, i32 0, i32 %45)
	store i32 0, i32* %1
	%46 = load i32, i32* %1
	%47 = load i32, i32* @N
	%48 = icmp slt i32 %46, %47
	%49 = load i32, i32* %1
	%50 = getelementptr [16 x i32], [16 x i32]* %2, i32 0, i32 1
	%51 = load i32, i32* %50
	call void @putint(i32 %51)
	call void @putch(i32 32)
	%52 = load i32, i32* %1
	%53 = add i32 %52, 1
	store i32 %53, i32* %1
	%54 = load i32, i32* @N
	%55 = srem i32 %54, 3
	%56 = load i32, i32* @N
	%57 = mul i32 %56, 2
	call void @putch(i32 10)
	call void @putint(i32 %55)
	call void @putch(i32 32)
	call void @putint(i32 %55)
	call void @putch(i32 32)
	%58 = getelementptr [16 x i32], [16 x i32]* %2, i32 0, i32 0
	%59 = load i32, i32* @N
	%60 = call i32 @sum(i32* %58, i32 %59)
	call void @putch(i32 115)
	call void @putch(i32 117)
	call void @putch(i32 109)
	call void @putch(i32 32)
	call void @putch(i32 105)
	call void @putch(i32 115)
	call void @putch(i32 32)
	call void @putint(i32 %60)
	%61 = alloca i32
	store i32 2, i32* %19
	store i32 3, i32* %20
	%62 = load i32, i32* %19
	%63 = load i32, i32* %20
	%64 = call i32 @plus(i32 %62, i32 %63)
	store i32 %64, i32* %61
	%65 = load i32, i32* %61
	call void @out(i32 %65)
	%66 = alloca [3 x [3 x i32]]
	%67 = getelementptr [3 x i32], [3 x i32]* %66, i32 0, i32 0, i32 0
	store i32 3, i32* %67
	%68 = getelementptr i32, i32* %67, i32 1
	store i32 2, i32* %68
	%69 = getelementptr i32, i32* %67, i32 2
	store i32 3, i32* %69
	%70 = getelementptr i32, i32* %67, i32 3
	store i32 1, i32* %70
	%71 = getelementptr i32, i32* %67, i32 4
	store i32 7, i32* %71
	%72 = getelementptr i32, i32* %67, i32 5
	store i32 7, i32* %72
	%73 = getelementptr i32, i32* %67, i32 6
	store i32 6, i32* %73
	%74 = getelementptr i32, i32* %67, i32 7
	store i32 7, i32* %74
	%75 = getelementptr i32, i32* %67, i32 8
	store i32 8, i32* %75
	store i32 3, i32* %19
	store i32 0, i32* %1
	%76 = load i32, i32* %1
	%77 = load i32, i32* %19
	%78 = icmp sle i32 %76, %77
	br i1 1, label %79, label %80

; <label>:79:
	call void @putch(i32 10)
	call void @putch(i32 84)
	call void @putch(i32 114)
	call void @putch(i32 117)
	call void @putch(i32 101)
	br label %80

; <label>:80:
	%81 = icmp ne i32 0, 0
	br i1 %81, label %82, label %83

; <label>:82:
	call void @putch(i32 10)
	call void @putch(i32 116)
	call void @putch(i32 114)
	call void @putch(i32 117)
	call void @putch(i32 101)
	br label %83

; <label>:83:
	%84 = load i32, i32* %1
	%85 = icmp eq i32 %84, 0
	%86 = zext i1 %85to i32
	%87 = icmp ne i32 %86, 0
	br i1 %87, label %88, label %89

; <label>:88:
	call void @putch(i32 10)
	call void @putch(i32 102)
	call void @putch(i32 101)
	call void @putch(i32 105)
	br label %89

; <label>:89:
	%90 = load i32, i32* %1
	%91 = icmp sgt i32 %90, 1
	br i1 %91, label %92, label %93

; <label>:92:
	call void @putch(i32 10)
	call void @putch(i32 100)
	call void @putch(i32 97)
	call void @putch(i32 121)
	call void @putch(i32 117)
	br label %93

; <label>:93:
	%94 = load i32, i32* %1
	%95 = icmp slt i32 %94, 1
	br i1 %95, label %96, label %97

; <label>:96:
	call void @putch(i32 10)
	call void @putch(i32 111)
	call void @putch(i32 114)
	br label %97

; <label>:97:
	%98 = load i32, i32* %1
	%99 = add i32 %98, 1
	store i32 %99, i32* %1
	%100 = load i32, i32* %1
	%101 = icmp eq i32 %100, 3
	br i1 %101, label %102, label %103

; <label>:102:
	call void @putch(i32 10)
	call void @putch(i32 51)
	br label %103

; <label>:103:
	%104 = load i32, i32* %1
	%105 = icmp ne i32 %104, 1
	br i1 %105, label %106, label %107

; <label>:106:
	call void @putch(i32 10)
	call void @putch(i32 84)
	call void @putch(i32 114)
	call void @putch(i32 49)
	br label %107

; <label>:107:
	call void @putch(i32 10)
	call void @putch(i32 101)
	call void @putch(i32 110)
	call void @putch(i32 100)
	%108 = alloca [2 x [2 x i32]]
	%109 = getelementptr [2 x i32], [2 x i32]* %108, i32 0, i32 0, i32 0
	store i32 1, i32* %109
	%110 = getelementptr i32, i32* %109, i32 1
	store i32 0, i32* %110
	%111 = getelementptr i32, i32* %109, i32 2
	store i32 2, i32* %111
	%112 = getelementptr i32, i32* %109, i32 3
	store i32 3, i32* %112
	%113 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* %108, i32 0, i32 0
	%114 = getelementptr [2 x i32], [2 x i32]* %113, i32 0, i32 0
	%115 = load i32, i32* %114
	call void @putint(i32 %115)
	call void @putch(i32 32)
	call void @putint(i32 %115)
	%116 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* %108, i32 0, i32 1
	%117 = getelementptr [2 x i32], [2 x i32]* %116, i32 0, i32 0
	%118 = load i32, i32* %117
	%119 = call i32 @plus1(i32 %118)
	store i32 %119, i32* %61
	%120 = load i32, i32* %61
	call void @putch(i32 10)
	call void @putint(i32 %120)
	call void @err()
	%121 = alloca i32
	%122 = load i32, i32* @l
	store i32 %122, i32* %121
	%123 = load i32, i32* %121
	call void @putint(i32 %123)
	%124 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %66, i32 0, i32 0
	%125 = call i32 @first([3 x i32]* %124)
	store i32 %125, i32* %121
	%126 = load i32, i32* %121
	call void @putint(i32 %126)
	%127 = load i32, i32* @l
	%128 = sub i32 0, %127
	store i32 %128, i32* %121
	%129 = load i32, i32* %121
	call void @putint(i32 %129)
	%130 = load i32, i32* @k
	store i32 %130, i32* %121
	%131 = load i32, i32* %121
	call void @putint(i32 %131)
	%132 = load i32, i32* %121
	%133 = load i32, i32* @l
	%134 = icmp slt i32 %132, %133
	br i1 %134, label %135, label %138

; <label>:135:
	%136 = load i32, i32* @l
	%137 = mul i32 %136, 3
	call void @putint(i32 %137)
	br label %138

; <label>:138:
	%139 = load i32, i32* @n
	%140 = mul i32 %139, 9
	%141 = add i32 %140, 1
	store i32 %141, i32* %121
	%142 = load i32, i32* %121
	call void @putint(i32 %142)
	ret i32 0
}
